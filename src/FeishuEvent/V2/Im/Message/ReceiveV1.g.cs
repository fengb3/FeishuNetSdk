// <auto-generated />


using FeishuNetSdk.FeishuEvent.V2;

namespace FeishuNetSdk.FeishuEvent.V2.Im.Message
{
    /// <summary>
    /// 接收消息<br/>
    /// 机器人接收到用户发送的消息后触发此事件。<br/>
    /// </summary>
    /// <事件类型> im.message.receive_v1 </事件类型>
    /// <事件版本> V2.0 </事件版本>
    /// <自建应用> 支持 </自建应用>
    /// <商店应用> 支持 </商店应用>
    /// <文档链接> <a href="https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive">在open.feishu.cn中查看</a> </文档链接>
    /// <权限要求>
    /// <ul>
    /// <li> 获取用户在群组中@机器人的消息 </li>
    /// <li> 接收群聊中@机器人消息事件 </li>
    /// <li> 获取群组中所有消息 </li>
    /// <li> 读取用户发给机器人的单聊消息 </li>
    /// <li> 获取用户发给机器人的单聊消息 </li>
    /// <li> 获取群聊中所有的用户聊天消息 (历史版本) </li>
    /// </ul>
    /// </权限要求>
    /// <字段权限要求>
    /// <ul>
    /// <li> 获取用户 user ID (仅自建应用) </li>
    /// </ul>
    /// </字段权限要求>
    public class ReceiveV1 : EventContext<ReceiveV1.EventData>
    {
        // EventData|sender:event_sender|sender_id:user_id|union_id:string||user_id:string||open_id:string||sender_type:string||tenant_key:string||message:event_message|message_id:string||root_id:string||parent_id:string||create_time:string||update_time:string||chat_id:string||thread_id:string||chat_type:string||message_type:string||content:string||mentions:mention_event|key:string||id:user_id|union_id:string||user_id:string||open_id:string||name:string||tenant_key:string||user_agent:string|
        public class EventData
        {
            	
            /// <summary>
            /// 事件的发送者
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("sender")]
            public EventSender Sender { get; init; }

            	
            /// <summary>
            /// 事件中包含的消息内容
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("message")]
            public EventMessage Message { get; init; }
        }

        // event_sender|sender_id:user_id|union_id:string||user_id:string||open_id:string||sender_type:string||tenant_key:string|
        public class EventSender
        {
            	
            /// <summary>
            /// 用户 ID
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("sender_id")]
            public UserId SenderId { get; init; }

            	
            /// <summary>
            /// 消息发送者类型。目前只支持用户(user)发送的消息。
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("sender_type")]
            public string SenderType { get; init; }

            	
            /// <summary>
            /// tenant key，为租户在飞书上的唯一标识，用来换取对应的tenant_access_token，也可以用作租户在应用里面的唯一标识
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("tenant_key")]
            public string TenantKey { get; init; }
        }

        // user_id|union_id:string||user_id:string||open_id:string|
        public class UserId
        {
            	
            /// <summary>
            /// 用户的 union id
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("union_id")]
            public string UnionId { get; init; }

            	
            /// <summary>
            /// 用户的 user id
            /// 字段权限要求：
            /// 获取用户 user ID仅自建应用
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("user_id")]
            public string UserIdValue { get; init; }

            	
            /// <summary>
            /// 用户的 open id
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("open_id")]
            public string OpenId { get; init; }
        }

        // event_message|message_id:string||root_id:string||parent_id:string||create_time:string||update_time:string||chat_id:string||thread_id:string||chat_type:string||message_type:string||content:string||mentions:mention_event|key:string||id:user_id|union_id:string||user_id:string||open_id:string||name:string||tenant_key:string||user_agent:string|
        public class EventMessage
        {
            	
            /// <summary>
            /// 消息的open_message_id，说明参见：消息ID说明
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("message_id")]
            public string MessageId { get; init; }

            	
            /// <summary>
            /// 根消息id，用于回复消息场景，说明参见：消息ID说明
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("root_id")]
            public string RootId { get; init; }

            	
            /// <summary>
            /// 父消息的id，用于回复消息场景，说明参见：消息ID说明
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("parent_id")]
            public string ParentId { get; init; }

            	
            /// <summary>
            /// 消息发送时间（毫秒）
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("create_time")]
            public string CreateTime { get; init; }

            	
            /// <summary>
            /// 消息更新时间（毫秒）
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("update_time")]
            public string UpdateTime { get; init; }

            	
            /// <summary>
            /// 消息所在的群组 ID
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("chat_id")]
            public string ChatId { get; init; }

            	
            /// <summary>
            /// 消息所属的话题 ID（不返回说明该消息非话题消息），说明参见：话题介绍
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("thread_id")]
            public string ThreadId { get; init; }

            	
            /// <summary>
            /// 消息所在的群组类型
            /// 可选值有：
            /// p2p：单聊group： 群组
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("chat_type")]
            public string ChatType { get; init; }

            	
            /// <summary>
            /// 消息类型
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("message_type")]
            public string MessageType { get; init; }

            	
            /// <summary>
            /// 消息内容, JSON 格式各类型消息Content
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("content")]
            public string Content { get; init; }

            	
            /// <summary>
            /// 被提及用户的信息
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("mentions")]
            public MentionEvent[] Mentions { get; init; }

            	
            /// <summary>
            /// 用户代理数据，仅在接收事件的机器人具备获取客户端用户代理信息权限时返回
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("user_agent")]
            public string UserAgent { get; init; }
        }

        // mention_event|key:string||id:user_id|union_id:string||user_id:string||open_id:string||name:string||tenant_key:string|
        public class MentionEvent
        {
            	
            /// <summary>
            /// mention key
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("key")]
            public string Key { get; init; }

            	
            /// <summary>
            /// 用户 ID
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("id")]
            public UserId Id { get; init; }

            	
            /// <summary>
            /// 用户姓名
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("name")]
            public string Name { get; init; }

            	
            /// <summary>
            /// tenant key，为租户在飞书上的唯一标识，用来换取对应的tenant_access_token，也可以用作租户在应用里面的唯一标识
            /// </summary>
            [global::System.Text.Json.Serialization.JsonPropertyName("tenant_key")]
            public string TenantKey { get; init; }
        }
    }
}